selection:
   ### use `&`, `|`, `~` for logical operations on numpy arrays
   ### can use functions from `math`, `np` (numpy), and `awkward` in the expression

new_variables:
   ### [format] name: formula
   ### can use functions from `math`, `np` (numpy), and `awkward` in the expression
   mask: awkward.JaggedArray.ones_like(del_eta)

preprocess:
  ### method: [manual, auto] - whether to use manually specified parameters for variable standardization
  method: manual
  ### data_fraction: fraction of events to use when calculating the mean/scale for the standardization
  data_fraction: 

inputs:
   points:
      length: 100
      vars: 
         - del_eta
         - del_phi
   features:
      length: 100
      vars: 
      ### [format 1]: var_name (no transformation)
      ### [format 2]: [var_name, 
      ###              subtract_by(optional, default=None, no transf. if preprocess.method=manual, auto transf. if preprocess.method=auto), 
      ###              multiply_by(optional, default=1), 
      ###              clip_min(optional, default=-5), 
      ###              clip_max(optional, default=5), 
      ###              pad_value(optional, default=0)]
         #- del_eta
         #- del_phi
         #- abs_del_eta
         #- abs_del_phi
         - del_r
         - log_pt
         - log_pt_jetpt
         #- log_E
         #- log_E_jetE
         #- ip2dpv0
         #- ip2dsigpv0
         #- ip3dpv0
         #- ip3dsigpv0
         #- ipz
         - tran_ip2dpv0
         #- tran_ip2dsigpv0
         #- tran_ip3dpv0
         #- tran_ip3dsigpv0
         - tran_ipz
   mask:
      length: 100
      vars: 
         - mask

labels:
   ### type can be `simple`, `custom`
   ### [option 1] use `simple` for binary/multi-class classification, then `value` is a list of 0-1 labels
   type: simple
   value: [is_EMJ, is_background]
   ### [option 2] otherwise use `custom` to define the label, then `value` is a map
   # type: custom
   # value: 
      # target_mass: np.where(fj_isQCD, fj_genjet_sdmass, fj_gen_mass) 

